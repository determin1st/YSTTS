// Generated by LiveScript 1.6.0
'use strict';
var YSTTS;
YSTTS = function(){
  var L00P, responseHandler, HttpOption, Store, Data, Api, apiProxy;
  L00P = function(){
    var grab, goto, Api;
    grab = function(me){
      return function(resolve){
        me._active = resolve;
        me._list[me._index].call(me);
      };
    };
    goto = function(index){
      return function(){
        if (this._active) {
          this._active();
        }
        this._index = index;
        new Promise(this._grab);
      };
    };
    Api = function(obj, onComplete){
      var x, i, a;
      this._active = null;
      this._index = 0;
      this._list = x = Object.getOwnPropertyNames(obj);
      this._complete = onComplete;
      this._grab = grab(this);
      i = -1;
      while (++i < x.length) {
        a = x[i];
        this[a] = goto(i);
        x[i] = obj[a];
      }
    };
    Api.prototype = {
      start: function(label){
        if (!this._active) {
          if (label) {
            this[label]();
          } else {
            this._index = 0;
            new Promise(this._grab);
          }
        }
      },
      'continue': function(){
        if (this._active) {
          this._active();
          if (++this._index >= this._list.length) {
            this._active = null;
            if (this._complete) {
              this._complete();
            }
          } else {
            new Promise(this._grab);
          }
        }
      },
      'break': function(){
        if (this._active) {
          this._active();
          this._active = null;
          if (this._complete) {
            this._complete();
          }
        }
      },
      repeat: function(){
        if (this._active) {
          this._active();
          new Promise(this._grab);
        }
      }
    };
    return function(obj, onComplete){
      return new Api(obj, onComplete);
    };
  }();
  responseHandler = function(resp){
    return resp.json().then(function(resp){
      if (!resp.ok) {
        throw resp;
      }
      return resp;
    });
  };
  HttpOption = function(){
    this.method = 'POST';
    this.body = '';
    this.headers = {
      'Content-Type': 'application/json'
    };
  };
  Store = function(id){
    this.id = id;
    this.out = [];
    this['in'] = [];
  };
  Data = function(opts){
    this.url = 'https://api.telegram.org/bot' + opts.token + '/';
    this.chat_id = opts.chat_id;
    this.username = opts.username || '';
    this.storage = opts.storage || {};
    this.error = '';
    this.bot = null;
    this.chat = null;
    this.ready = false;
    this.active = false;
    this.queue = [];
    this.index = 0;
    this.updates = null;
    this.timeout_id = 0;
    this.api = new Api(this);
  };
  Api = function(data){
    this.start = function(){
      data.thread.start();
    };
    this.stop = function(){
      data.thread['break']();
    };
    this.sendMessage = function(text, onComplete){
      if (data.ready && text) {
        data.queue.push([1, text, onComplete]);
      }
    };
    this.sendTypingAction = function(onComplete){
      if (data.ready) {
        data.queue.push([2, onComplete]);
      }
    };
    this.sendLog = function(text, onComplete){
      if (data.ready && text) {
        data.queue.push([3, text, onComplete]);
      }
    };
  };
  apiProxy = {
    get: function(data, k){
      switch (k) {
      case 'ready':
      case 'active':
      case 'error':
        return data[k];
      case 'chatname':
        return data.ready ? data.chat.first_name : '';
      case 'username':
        return data.username;
      }
      if (data.api.hasOwnProperty(k)) {
        return data.api[k];
      }
      return null;
    },
    set: function(data, k, v){
      switch (k) {
      case 'active':
        if (data.ready) {
          data.active = !!v;
        }
      }
      return true;
    }
  };
  return function(opts){
    var http, data, api;
    http = new HttpOption();
    data = new Data(opts);
    api = new Proxy(data, apiProxy);
    data.thread = L00P({
      checkBot: function(){
        var this$ = this;
        fetch(data.url + 'getMe', http).then(responseHandler).then(function(r){
          data.bot = r.result;
          this$['continue']();
        })['catch'](function(e){
          data.error = 'BOT check failed';
          if (e.description) {
            data.error += ': ' + e.description;
          }
          this$['break']();
        });
      },
      checkChat: function(){
        var this$ = this;
        http.body = JSON.stringify({
          chat_id: data.chat_id
        });
        fetch(data.url + 'getChat', http).then(responseHandler).then(function(r){
          data.chat = r.result;
          this$['continue']();
        })['catch'](function(e){
          data.error = 'CHAT check failed';
          if (e.description) {
            data.error += ': ' + e.description;
          }
          this$['break']();
        });
      },
      startChat: function(){
        var s;
        data.ready = true;
        if (opts.onStart) {
          opts.onStart.call(api);
        }
        s = data.storage;
        if (!s.hasOwnProperty(data.username) || s.id !== data.chat_id) {
          s[data.username] = new Store(data.chat_id);
        }
        this['continue']();
      },
      getUpdates: function(){
        var this$ = this;
        http.body = JSON.stringify({
          timeout: 100,
          limit: 1000
        });
        fetch(data.url + 'getUpdates', http).then(responseHandler).then(function(r){
          if (!data.updates || data.updates.length !== r.result.length) {
            data.updates = r.result;
            this$.refineData();
          } else {
            this$['continue']();
          }
        })['catch'](function(e){
          if (opts.onError) {
            opts.onError.call(api, e);
            this$['continue']();
          } else {
            this$['break']();
          }
        });
      },
      wait: function(){
        var c, task, back, this$ = this;
        if (c = data.queue.length) {
          task = data.queue[data.index];
          if (++data.index === c) {
            data.index = data.queue.length = 0;
          }
          switch (task[0]) {
          case 1:
            back = task[2];
            http.body = JSON.stringify({
              chat_id: data.chat_id,
              text: '*' + data.username + '*`:` ' + task[1],
              parse_mode: 'Markdown'
            });
            task = 'sendMessage';
            break;
          case 2:
            back = task[1];
            http.body = JSON.stringify({
              chat_id: data.chat_id,
              action: 'typing'
            });
            task = 'sendChatAction';
            break;
          case 3:
            back = task[2];
            http.body = JSON.stringify({
              chat_id: data.chat_id,
              text: '`log:`*' + data.username + '*`:` ' + task[1],
              parse_mode: 'Markdown',
              disable_notification: true
            });
            task = 'sendMessage';
          }
          fetch(data.url + task, http).then(responseHandler).then(function(r){
            if (back) {
              back.call(api, true, r);
            }
            this$.repeat();
          })['catch'](function(e){
            if (back) {
              back.call(api, false, e);
            }
            this$.repeat();
          });
        } else if (data.active) {
          data.timeout_id = setTimeout(function(){
            this$.getUpdates();
          }, 30000);
        }
      },
      refineData: function(){
        debugger;
        data;
        this.wait();
      }
    }, function(){
      data.active = false;
      if (data.timeout_id) {
        clearTimeout(data.timeout_id);
      }
      if (opts.onStop) {
        opts.onStop.call(api);
      }
    });
    return api;
  };
}();